const express = require('express');
const jwt = require('jsonwebtoken');
const cors = require('cors');


const app = express();
const PORT = 3000;
app.use(cors());
const bodyParser = require('body-parser'); 

// Middleware para parsear JSON
app.use(express.json());
const users = [
  {
    id:1,
    user: 'kevin',
    password: 12345,
  },
  {
    id:1,
    user: 'juandiego',
    password: 123456,
  },
];


// Ruta de login
app.post('/login', (req, res) => {
  // Supongamos que aquí validas las credenciales del usuario
  const { username, password } = req.body;

  // Verificar credenciales (ejemplo básico)
  const user = users.find(user => user.user === username && user.password === password);
  if (user) {
    // Si las credenciales son válidas, se genera un token JWT
    const token = jwt.sign({ username }, 'secreto', { expiresIn: '1h' }); // Aquí deberías usar una clave secreta más segura

    // Se envía el token como respuesta
    res.json({ token });
  } else {
    // Si las credenciales son inválidas, se devuelve un mensaje de error
    res.status(401).json({ message: 'Credenciales inválidas' });
  }
});

// Middleware para verificar el token en rutas protegidas
const verifyToken = (req, res, next) => {
  const token = req.headers['authorization'];

  if (!token) {
    return res.status(403).json({ message: 'Token no proporcionado' });
  }

  jwt.verify(token, 'secreto', (err, decoded) => {
    if (err) {
      return res.status(401).json({ message: 'Token inválido' });
    }

    req.user = decoded;
    next();
  });
};

// Ruta protegida
app.get('/datos-protegidos', verifyToken, (req, res) => {
  res.json({ message: '¡Bienvenido a datos protegidos!', user: req.user });
});

// Arreglo de objetos
const dataSource = [
  {
    id:1,
    lat: 8.2377,
    lng: -73.3579,
    description: 'ocaña'
  },
  {
    id:2,
    lat: 8.2385,
    lng: -73.3560,
    description: 'ocaña test'
  }
];

// Endpoint GET para consultar el arreglo de objetos
app.get('/dataTable', (req, res) => {
  res.json(dataSource);
});

app.use(bodyParser.json());

// Endpoint para actualizar un objeto en el array dataSource
app.put('/actualizar', (req, res) => {
  const { id, lat, lng, description } = req.body;

  // Buscar el objeto en el array dataSource por su id
  const index = dataSource.findIndex(item => item.id === id);

  if (index !== -1) {
    // Si se encuentra el objeto, actualizar sus propiedades
    dataSource[index] = { id, lat, lng, description };
    res.status(200).json({ message: 'Objeto actualizado correctamente', updatedObject: dataSource[index] });
  } else {
    // Si no se encuentra el objeto, devolver un error
    res.status(404).json({ error: 'Objeto no encontrado' });
  }
});

// Generar un ID único para cada objeto
function generateRandomId() {
  return Math.floor(Math.random() * 1000); // Genera un número aleatorio entre 0 y 999
}

app.post('/guardar', (req, res) => {
  const newData = req.body;
  newData.id = generateRandomId(); // Agregar un ID único al nuevo objeto
  dataSource.push(newData);
  res.status(201).json({ message: 'Datos guardados correctamente' });
});

// Iniciar el servidor
app.listen(PORT, () => {
  console.log(`Servidor Express corriendo en el puerto ${PORT}`);
});
